(define-module (atelier packages emulators)
  #:use-module (guix packages)
  #:use-module (guix git-download)
  #:use-module (guix download)
  #:use-module (guix build-system cmake)
  #:use-module (guix build-system copy)
  #:use-module (guix build-system scons)
  #:use-module (guix build-system gnu)
  #:use-module (guix gexp)
  #:use-module (gnu packages)
  #:use-module (gnu packages sdl)
  #:use-module (gnu packages qt)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages check)
  #:use-module (gnu packages debug)
  #:use-module (gnu packages xorg)
  #:use-module (gnu packages xdisorg)
  #:use-module (gnu packages glib)
  #:use-module (gnu packages kde-frameworks)
  #:use-module (gnu packages freedesktop)
  #:use-module (gnu packages audio)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages image)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages pretty-print)
  #:use-module (gnu packages cpp)
  #:use-module (gnu packages stb)
  #:use-module (gnu packages gl)
  #:use-module (gnu packages xiph)
  #:use-module (gnu packages web)
  #:use-module (gnu packages toolkits)
  #:use-module (gnu packages vulkan)
  #:use-module (gnu packages digest)
  #:use-module (gnu packages llvm)
  #:use-module (gnu packages parallel)
  #:use-module (gnu packages icu4c)
  #:use-module (gnu packages video)
  #:use-module (gnu packages libusb)
  #:use-module (gnu packages serialization)
  #:use-module (gnu packages tls)
  #:use-module (gnu packages xml)
  #:use-module (gnu packages python)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (atelier utils)
  #:use-module (ice-9 match))

;; const char**
;; cubeb_get_backend_names()
;; {
;;   static const char* backend_names[] = {
;; #if defined(USE_PULSE)
;;     "pulse",
;; #endif
;; #if defined(USE_JACK)
;;     "jack",
;; #endif
;; #if defined(USE_ALSA)
;;     "alsa",
;; #endif
;; #if defined(USE_AUDIOUNIT)
;;     "audiounit",
;; #endif
;; #if defined(USE_WASAPI)
;;     "wasapi",
;; #endif
;; #if defined(USE_WINMM)
;;     "winmm",
;; #endif
;; #if defined(USE_SNDIO)
;;     "sndio",
;; #endif
;; #if defined(USE_SUN)
;;     "sun",
;; #endif
;; #if defined(USE_OSS)
;;     "oss",
;; #endif
;;     NULL,
;;   };

;;   return backend_names;
;; }



;; Glad
;; the glad files are the generated output of glad, config as follows

;; OpenGL, OpenGL ES loader generated by glad 0.1.25 on Fri Jul 20 15:42:19 2018.
;; Language/Generator: C/C++
;; Specification: gl
;; APIs: gl=4.6, gles2=3.2
;; Profile: core

(define-public glslang-11.5.0
  (package
    (inherit glslang)
    (version "11.5.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/KhronosGroup/glslang")
                    (commit version)))
              (sha256 (base32 "0r2v7j9rjvvq1l43ay2q9gcwxkqx0rsp09swwqjmmmgzh3i39sv5"))))
    (arguments (cons* #:tests? #f
                      (package-arguments glslang)))))

;; imgui notes
;; move "/dep/imgui/include/IconsPromptFont.h" where did this file originally come from?
;; needs patches to imgui possibly

;; Needs to be built using the repo script, not the premade version
;; (define-public icon-font-cpp-headers
;;   (let ((commit "96c8d39dee3eb33a64e42eee0d8f3ca40320df78"))
;;     (package
;;      (name "iconFontCppHeaders")
;;      (version (git-version "0" "1" commit))
;;      (source (origin
;;               (method git-fetch)
;;               (uri (git-reference
;;                     (url "https://github.com/juliettef/IconFontCppHeaders")
;;                     (commit commit)))
;;               (sha256 (base32 "0lnkl0d0ramvwjv3sw61wrglsxj6aw38vg1jzx9d0iiscn8sm6cv"))))
;;      (build-system copy-build-system)
;;      (arguments (list
;;                  #:install-plan
;;                  '(list '("." "/include" #:include-regexp ("\\.h$")))))
;;      (home-page "")
;;      (synopsis "")
;;      (description "")
;;      (license #f)))) ;;fix license

;; Used by libchdr but needing a 3rd party 7-zip implementation to extract the original 7-zip SDK. Do another time.
;; (define-public 7-zip
;;   (package
;;    (name "7-zip")
;;    (version "2301")
;;    (source (origin
;;             (method url-fetch)
;;             (uri (string-append "https://www.7-zip.org/a/lzma" version ".7z"))
;;             (sha256 (base32 "0w0kvl3qby1sq0i68hq10514sgfd4gl35f486i1rbzdvsqsdhz9i"))))
;;    (inputs `(,p7zip))
;;    (build-system cmake-build-system)
;;    (arguments (list #:phases
;;                 #~(modify-phases %standard-phases
;;                                 (add-before 'configure 'extract-7z
;;                                             (lambda _
;;                                               (invoke "7z" "x" "-osource" (string-append "lzma" #$version ".7z"))
;;                                               (chdir "source/C"))))))
;;    (home-page "")
;;    (synopsis "")
;;    (description "")
;;    (license license:public-domain)))

;;todo workout the correct hash and patch since I can't track the exact version down right now.
;; (define-public libchdr
;;   (package
;;    (name "libchdr")
;;    ;(version "54bfb87")
;;    (version "2a1119c")
;;    (source (origin
;;             (method git-fetch)
;;             (uri (git-reference
;;                   (url "https://github.com/rtissera/libchdr")
;;                   (commit version)))
;;             (sha256 (base32 "1j73bk7z8vphxysihay6hjkvfi0ck624vngsd41dl0jli1y0n9bg"))
;;             (modules '((guix build utils)))
;;             (snippet `(begin
;;                         (delete-file-recursively "deps/zlib-1.3.1")
;;                         (delete-file-recursively "deps/lzma-19.00")
;;                         ;;(delete-file-recursively "deps/lzma-22.01") fix
;;                         ;;(delete-file-recursively "deps")
;;                         (substitute* "CMakeLists.txt"
;;                                      ;; (("add_subdirectory\\(deps/lzma-22\\.01 EXCLUDE_FROM_ALL\\)") "find_package(LibLZMA REQUIRED)")
;;                                      ;; (("  list\\(APPEND CHDR_LIBS lzma\\)") "")
;;                                      ;; (("  list\\(APPEND CHDR_INCLUDES lzma\\)") "")
;;                                      )))))
;;    (inputs `((,zstd "lib")
;;              ,zlib
;;              ,xz))
;;    (native-inputs
;;     (list pkg-config))
;;    (build-system cmake-build-system)
;;    (arguments (list
;;                #:tests? #f
;;                #:configure-flags '(list "-DWITH_SYSTEM_ZLIB=1" "")))
;;    (home-page "https://github.com/rtissera/libchdr")
;;    (synopsis "Standalone library for reading MAME's CHDv1-v5 formats. ")
;;    (description "libchdr is a standalone library for reading MAME's CHDv1-v5 formats.
;; The code is based off of MAME's old C codebase which read up to CHDv4 with OS-dependent 
;; features removed, and CHDv5 support backported from MAME's current C++ codebase")
;;    (license license:bsd-3)))

;; rainterface
;; https://github.com/RetroAchievements/RAInterface
;; would need to be set up as a source only package from around the following time period
;; commit 43869bf74c878c8f45ac3ab3a0a7b5803ac4df85
;; Author: Connor McLaughlin <stenzek@gmail.com>
;; Date:   Mon Aug 22 19:33:00 2022 +1000

;;     dep: Update RAInterface

(define-public rcheevos-duckstation
  (package
   (name "rcheevos-duckstation")
   (version "11.3.0")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/RetroAchievements/rcheevos")
                  (commit (string-append "v" version))))
            (sha256 (base32 "01n7ym8phmvhmv37fs8nk0zp0y1jqmsb5ch8r8vw9jvigmjzds83"))
            (patches (search-patches "rcheevos-duckstation.patch")))) ;; no build files other then what's in test ðŸ˜¦
   (build-system cmake-build-system)
   (arguments (list
               #:phases ;; technically this stuff here should be done by cmake, but my cmake-fu isn't up to scratch
               #~(modify-phases %standard-phases
                                (delete 'check)
                                (replace 'install (lambda _
                                                    (install-file "librcheevos.a"
                                                                  (string-append #$output "/lib"))
                                                    (copy-recursively "../source/include"
                                                                      (string-append #$output "/include/rcheevos")))))))
   (home-page "https://github.com/RetroAchievements/rcheevos")
   (synopsis "rcheevos is a set of C code, or a library if you will, that tries to make it easier for emulators to process RetroAchievements data, providing support for achievements and leaderboards for their players.")
   (description synopsis)
   (license license:expat)))

;;todo finish
(define-public riscv-disassembler
  (let ((commit "3b1df91f260c7622165ac4e4c486ed5c5509411c"))
    (package
     (name "riscv-disassembler")
     (version (git-version "0" "1" commit))
     (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/michaeljclark/riscv-disassembler")
                    (commit commit)))
              (sha256 (base32 "0ri0453a1lhdmh9xiwd85zbh4arvhd7ll4xq3vzc8zwpyk1r2l8s"))))
     (build-system cmake-build-system)
     (arguments (list
                 #:phases
                 '(modify-phases %standard-phases
                                 (replace 'install (Î» _
                                                     ;;todo install
                                                     )))))
     (home-page "https://github.com/michaeljclark/riscv-disassembler")
     (synopsis "RISC-V Disassembler with support for RV32/RV64/RV128 IMAFDC")
     (description synopsis)
     (license #f))))

(define-public simpleini
  (package
    (name "simpleini")
    (version "4.22")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/brofield/simpleini")
                    (commit (string-append "v" version))))
              (sha256 (base32 "1hwmwnb1a3n6cza8ngr8myxsbq6hk7l328ly799wc0zpzzx7i0hz"))))
    (native-inputs `(,googletest)) ;; should use v1.14.0 of googletest currenly v1.12.1
    (build-system cmake-build-system)
    (arguments (list
                #:configure-flags
                '(list "-DSIMPLEINI_USE_SYSTEM_GTEST=ON")))
    (home-page "https://github.com/brofield/simpleini")
    (synopsis "A cross-platform library that provides a simple API to read and write INI-style configuration files.")
    (description synopsis)
    (license license:expat)))

(define-public soundtouch-static-noexception
  (package
    (inherit soundtouch)
    (name "soundtouch-duckstation")
    (arguments (list
                ;; #:make-flags
                ;; '(list "")
                #:phases
                #~(modify-phases %standard-phases
                    (add-before 'configure 'configure-modification
                      (lambda _
                        (substitute* "configure.ac"
                          (("#AC_DISABLE_SHARED")
                           "AC_DISABLE_SHARED")
                          (("AC_DISABLE_STATIC")
                           "#AC_DISABLE_STATIC")
                          (("CXXFLAGS=\"-O3 -ffast-math\"")
                           "CXXFLAGS=\"-O3 -ffast-math -DST_NO_EXCEPTION_HANDLING=1\"")
                          (("source/SoundStretch/Makefile")
                           ""))))
                    (add-after 'install 'define-st-no-exception-handling
                      (Î» _
                        (substitute* (string-append #$output "/include/soundtouch/soundtouch_config.h")
                          (("/\\* Use ARM NEON extension \\*/")
                           "/* Use ARM NEON extension */\n#define ST_NO_EXCEPTION_HANDLING 1"))))
                    )
                ))))

(define stb-image-resize
  ((@@ (gnu packages stb) make-stb-header-package)
   "stb-image-resize" "0.96"
   "resize images larger/smaller with good quality"))

;; `vixl@3.0.0: build system `scons' does not support cross builds` Hmn todo finish
(define-public vixl-3
  (package
    (name "vixl")
    (version "3.0.0")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/Linaro/vixl")
                    (commit "346e5bddf5051bbdf9982dc2f01c874c94223527"))) ;; need to use the commit rather then the tag since it's broken
              (sha256 (base32 "1wxmizvb6wms77nnc4i36jxzjq1kq9bzd3lcg7pw2xvg1xaa4xcv"))))
    (build-system scons-build-system)
    (home-page "https://github.com/Linaro/vixl")
    (synopsis "Armv8 Runtime Code Generation Library")
    (description "VIXL contains three components.

    1. Programmatic assemblers to generate A64, A32 or T32 code at runtime. The assemblers abstract some of the constraints of each ISA; for example, most instructions support any immediate.
    2. Disassemblers that can print any instruction emitted by the assemblers.
    3. A simulator that can simulate any instruction emitted by the A64 assembler. The simulator allows generated code to be run on another architecture without the need for a full ISA model.
")
    (license #f))) ;; todo fix

(define-public vulkan-headers-duckstation
  (package
    (inherit vulkan-headers)
    (name "vulkan-headers-duckstation")
    (version "1.3.268")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/KhronosGroup/Vulkan-Headers")
                    (commit (string-append "vulkan-sdk-" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "06nrl5dx0bcx75qfhbgrhzq1zv6bjpj3dhx287yhhlp7fm6xcf08"))))))

(define-public xbyak
  (package
    (name "xbyak")
    (version "6.73")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/herumi/xbyak")
                    (commit (string-append "v" version))))
              (sha256 (base32 "0iny9b4yikwhxgaw9phmycn1hdfvzvy4n4b10979v81vv094ib7v"))))
    (build-system cmake-build-system)
    (arguments (list
                #:phases
                '(modify-phases %standard-phases
                   (delete 'check))))
    (home-page "https://github.com/herumi/xbyak")
    (synopsis "A C++ JIT assembler for x86 (IA32), x64 (AMD64, x86-64)")
    (description "Xbyak is a C++ header library that enables dynamically to assemble x86(IA32), x64(AMD64, x86-64) mnemonic.

The pronunciation of Xbyak is kÉ™i-bja-k. It is named from a Japanese word é–‹é—¢, which means the beginning of the world.")
    (license license:bsd-3)))

(define-public zycore-c
  (package
    (name "zycore-c")
    (version "6c93d9a38e62d4db82f99bf99159e1ee78341e36") ;;todo fix, it wasn't a tagged release they used in 3.2.1 of zydis
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/zyantific/zycore-c")
                    (commit "6c93d9a38e62d4db82f99bf99159e1ee78341e36")))
              (sha256 (base32 "1p3z2i8cy77q9y0i0s9g3l9wblgxps20j7phh18ci8s44nzqqf9h"))))
    (build-system cmake-build-system)
    ;;(native-inputs `(,googletest)) ;;needs CMakeLists.txt patch
    ;; (arguments (list
    ;;             #:configure-flags '(list "-DZYCORE_BUILD_TESTS=ON")))
    (arguments (list
                #:phases
                '(modify-phases %standard-phases
                   (delete 'check))))
    (home-page "https://github.com/zyantific/zycore-c")
    (synopsis "Internal library providing platform independent types, macros and a fallback for environments without LibC.")
    (description synopsis)
    (license license:expat)))

(define-public zydis-3
  (package
    (name "zydis")
    (version "3.2.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/zyantific/zydis")
                    (commit (string-append "v" version))
                    (recursive? #t))) ;;todo fix git submodule of zycore-c (above)
              (sha256 (base32 "0ilxc21gfnh1nihw0w92abvndmkn57hl98myvx27c8vg1wcy27hl"))))
    (propagated-inputs (list zycore-c))
    (build-system cmake-build-system)
    (arguments (list
                #:phases
                '(modify-phases %standard-phases
                   (delete 'check))))
    (home-page "https://zydis.re/")
    (synopsis "Fast and lightweight x86/x86-64 disassembler library.")
    (description synopsis)
    (license license:expat)))

(define-public duckstation
  (package
    (name "duckstation")
    (version "0.1-6292")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/stenzek/duckstation")
                    (commit (string-append "v" version))))
              (sha256 (base32 "090lwnzc2jllqpzyy7skd6lna7d53vdi37wd2nhnh4dh2j5szrph"))
              (patches (search-patches "duckstation.patch"))
              (modules '((guix build utils)))
              (snippet '(begin
                          ;;(delete-file-recursively "dep")
                          ;;move "/dep/imgui/include/IconsPromptFont.h" "src/util/" ;; where did this file originally come from? 
                          (for-each (Î» (p) (delete-file-recursively (string-append "dep/" p)))
                                    '( "biscuit" ;;riscv
                                       "cpuinfo"
                                       "cubeb"
                                       "d3d12ma" ;;win32 related
                                       "discord-rpc"
                                       "fast_float"
                                       "fmt"
                                       "glad"
                                       ;;"glslang" ;; fatal error: SPIRV/GlslangToSpv.h: No such file or directory
                                       ;;"googletest"
                                       ;;"imgui" ;;requires patches
                                       ;;"libchdr" modified and unknown commit
                                       ;;"lzma"
                                       "minizip"
                                       "msvc" ;;win?
                                       ;;"rainterface"
                                       "rapidjson"
                                       "rcheevos"
                                       ;;"reshadefx"
                                       "riscv-disas" ;;riscv
                                       "simpleini"
                                       ;;"soundtouch" ;; error: exception handling disabled, use â€˜-fexceptionsâ€™ to enable
                                       "spirv-cross" ;; apple
                                       ;;todo fix "stb"
                                       "vixl"              ;; arm32/64
                                       "vulkan" ;;vulkan-headers
                                       "winpixeventruntime" ;;win32 related
                                       "xbyak"
                                       "xxhash"
                                       ;;"zlib"
                                       "zstd"
                                       "zydis"
                                       ))

                          ;;cubeb was modified to include a function `cubeb_get_backend_names` which returned the audio libraries built against.
                          (substitute* "src/util/cubeb_audio_stream.cpp"
                            (("const char\\*\\* cubeb_names = cubeb_get_backend_names\\(\\);")
                             (string-append "static const char* cubeb_names[] = {"
                                            (string-join '("\"alsa\"" "\"pulse\"" "nullptr") ", ") ;; todo check inputs of cubeb rather then hardcode.
                                            "};")))
                          ;;remove dep on SPIR-V (apple)
                          (substitute* "dep/reshadefx/CMakeLists.txt"
                            (("\"\\$\\{CMAKE_CURRENT_SOURCE_DIR\\}/\\.\\./spirv-cross/include/spirv-cross\" # SPIR-V")
                             "")
                            (("src/effect_codegen_spirv\\.cpp")
                             ""))))))
    (inputs `(                  
              ,qtbase
              ,qttools
              ,qtsvg
              ,dbus
              ,curl
              ,sdl2
              ,pulseaudio  
              ,wayland
              ,libbacktrace
              ,libxrandr

              ;; Patched Deps
              ;;,libchdr
              ,cubeb
              ,fmt
              (,zstd "lib")
              ;;,zlib ;;should be minizip?
              ,minizip
              ;;,imgui
              ,spirv-tools
              ,glslang
              
              ,xxhash
              ,cpuinfo
              ;;,icon-font-cpp-headers ;;part of imgui?
              ))
    (native-inputs `(,pkg-config
                     ,icu4c    ;; needed for simpleini
                     ,glad ;; generated code

                     ;; Patched Deps
                     ,stb-image-resize
                     ,stb-image-write
                     ,stb-image
                     ,soundtouch-static-noexception
                     ,rcheevos-duckstation
                     ,simpleini
                     ,fast-float
                     ,vulkan-memory-allocator
                     ,vulkan-headers
                     ,rapidjson
                     ;; ,@(match (%current-target-system)
                     ;;     ("x86_64-linux" (list zydis-3 xbyak)))
                     ,zydis-3
                     ,xbyak
                     ))
    (build-system cmake-build-system)
    (arguments (list
                ;;#:configure-flags '(list "--debug-find")
                #:phases
                #~(modify-phases %standard-phases
                    (delete 'check)
                    (add-before 'configure 'generate-glad
                               (Î» _
                                 (define (glad spec api out)
                                   (invoke "glad"
                                           "--profile"   "c";;"core"
                                           "--api"       api ;;"gl=4.6,gles2=3.2" ;;egl=1.5 with --spec egl if egl is enabled and glx=1.4 if x11 is enabled
                                           ;;"--generator" "c"
                                           "--spec"      spec
                                           "--reproducible"
                                           "--out-path"  out ;;"../glad"
                                           ))
                                 (glad "gl"  "gl=4.6,gles2=3.2" "../glad")
                                 (glad "egl" "egl=1.5"          "../glad-egl")
                                 (glad "glx" "glx=1.4"          "../glad-glx")
                                 ;; move the files into the original dir
                                 (move-file "../glad-egl/src/glad.c"     "../glad/src/glad-egl.c")
                                 (move-file "../glad-egl/include/glad.h" "../glad/src/glad-egl.h")
                                 (move-file "../glad-glx/src/glad.c"     "../glad/src/glad-glx.c")
                                 (move-file "../glad-glx/include/glad.c" "../glad/src/glad-glx.h")
                                 ;; fix headers
                                 (substitute* "../glad/src/glad-egl.c"
                                               (("glad\\.h")
                                                 "glad-egl.h"))
                                 (substitute* "../glad/src/glad-glx.c"
                                               (("glad\\.h")
                                                 "glad-glx.h"))))
                    (add-after 'generate-glad 'cmake-glad-patch
                               (Î» _ (display "Asdf")))
                    (replace 'install
                             (lambda _
                               (install-file "bin/duckstation-qt"
                                             (string-append #$output "/bin"))
                               (copy-recursively "bin/resources"
                                                 (string-append #$output "/bin/resources"))
                               (copy-recursively "bin/translations"
                                                 (string-append #$output "/bin/translations")))))))
    (home-page "https://github.com/stenzek/duckstation")
    (synopsis "DuckStation is an simulator/emulator of the Sony PlayStation(TM) console, focusing on playability, speed, and long-term maintainability.")
    (description "DuckStation is an simulator/emulator of the Sony PlayStation(TM) console, focusing on playability, speed, and long-term maintainability. The goal is to be as accurate as possible while maintaining performance suitable for low-end devices. \"Hack\" options are discouraged, the default configuration should support all playable games with only some of the enhancements having compatibility issues.

A \"BIOS\" ROM image is required to to start the emulator and to play games. You can use an image from any hardware version or region, although mismatching game regions and BIOS regions may have compatibility issues. A ROM image is not provided with the emulator for legal reasons, you should dump this from your own console using Caetla or other means.")
    (license license:gpl3)))

;; set(SRCS
;;     ../glad/src/glad.c
;; )

;; # Linking as a static library breaks on macOS, see https://github.com/libigl/libigl/issues/751
;; if(APPLE)
;;   add_library(glad OBJECT ${SRCS})
;; else()
;;   add_library(glad ${SRCS})
;; endif()

;; target_include_directories(glad PRIVATE "../../../glad/include")
;; target_include_directories(glad PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include")
;; target_include_directories(glad INTERFACE "../../../glad/include")
;; target_include_directories(glad INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/include")
;; target_link_libraries(glad PRIVATE Threads::Threads "${CMAKE_DL_LIBS}")

;; if(ENABLE_EGL)
;;   target_sources(glad PRIVATE src/glad_egl.c)
;;   target_link_libraries(glad PRIVATE EGL::EGL)
;; endif()
;; if(ENABLE_X11)
;;   target_sources(glad PRIVATE src/glad_glx.c)
;; endif()

(define qtmultimedia-with-plugin-path
  (package
   (inherit qtmultimedia)
   (native-search-paths
    (list (search-path-specification
           (variable "QT_PLUGIN_PATH")
           (files '("lib/qt6/plugins")))))))

(define-public rpcs3
  (package
   (name "RPCS3")
   (version "0.0.32")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/RPCS3/rpcs3")
                  (commit (string-append "v" version))
                  (recursive? #t)))
            (sha256 (base32 "1n26kd6fc6l5msc0g7llgdvk5pcg4zq8mk3jg5kgv272ifljjryp"))
            (modules '((guix build utils)))
            (snippet '(begin
                        ;;(delete-file-recursively "3rdparty")
                        (for-each (Î» (p) (delete-file-recursively (string-append "3rdparty/" p)))
                                  '(;;"7z"
                                    ;;"asmjit"
                                    ;;"cubeb"
                                    ;;"curl"
                                    ;;"discord-rpc"
                                    ;;"FAudio"
                                    ;;"ffmpeg" could remove with patched 3rdparty/CMakeLists.txt
                                    ;;"flatbuffers"
                                    ;;"GL"
                                    ;;"glslang"
                                    ;;"GPUOpen"
                                    ;;"hidapi"
                                    ;;"libpng"
                                    ;;"libsdl-org" could remove with patched 3rdparty/CMakeLists.txt
                                    ;;"libusb"
                                    ;;"llvm" could remove with patched 3rdparty/CMakeLists.txt
                                    ;;"miniupnp"
                                    ;;"MoltenVK"
                                    ;;"OpenAL"
                                    ;;"pine"
                                    ;;"pugixml"
                                    ;;"robin_hood"
                                    ;;"rtmidi"
                                    ;;"SoundTouch"
                                    ;;"SPIRV"
                                    ;;"stblib"
                                    ;;"wolfssl"
                                    ;;"xxHash"
                                    ;;"yaml-cpp"
                                    ;;"zlib"
                                    ))
                        ;; Why? 
                        (substitute* "3rdparty/glslang/glslang/SPIRV/SpvTools.h"
                                     (("#include \"glslang/MachineIndependent/localintermediate\\.h\"")
                                      "#include \"../glslang/MachineIndependent/localintermediate.h\""))
                        (substitute* "3rdparty/glslang/glslang/SPIRV/GlslangToSpv.h"
                                     (("#include \"glslang/Include/intermediate\\.h\"")
                                      "#include \"../glslang/Include/intermediate.h\""))))))
   (build-system cmake-build-system)
   (arguments (list
               ;; #:build-type "Debug"
               ;; #:strip-binaries? #f
               #:configure-flags
               '(map (Î» (c) (string-append "-D" (car c) "=" (cdr c)))
                     '(("USE_SYSTEM_SDL"    . "ON")
                       ("USE_SYSTEM_FFMPEG" . "ON")
                       
                       ;; 3rd party
                       ("USE_SYSTEM_FLATBUFFERS" . "ON")
                       ("USE_SYSTEM_PUGIXML"     . "ON")
                       ("USE_SYSTEM_LIBUSB"      . "ON")
                       ("USE_SYSTEM_XXHASH"      . "ON")
                       ;;USE_LIBEVDEV   ???
                       ("USE_SYSTEM_FAUDIO"      . "ON")
                       ;; ("USE_SYSTEM_WOLFSSL"     . "ON")
                       ;; ("USE_SYSTEM_CURL"        . "ON")
                       ;;built-in curl requires built-in wolfssl
                       ("USE_SYSTEM_ZLIB"        . "ON")))
               #:phases
               #~(modify-phases %standard-phases
                  (delete 'check))))
   (inputs (list eudev    ;;Checking for modules 'libevdev;libudev' No package 'libevdev' found
                 libevdev ;;? vs eudev
                 vulkan-validationlayers ;; `Could NOT find Vulkan (missing: Vulkan_LIBRARY) (found version "1.3.280")` ??
                 openal
                 glew 
                 qtbase
                 qtdeclarative
                 qtsvg
                 libglvnd
                 
                 ;;doxygen?
                 libxext
                 libxkbcommon
                 ;;jack-2
                 alsa-lib
                 
                 ;;3rd party replacements
                 llvm-16 ;; They use 16.0.1
                 libusb
                 sdl2
                 flatbuffers
                 zlib
                 ffmpeg
                 ;;wolfssl
                 xxhash
                 pugixml
                 ;; curl
                 faudio))
   (native-inputs (list pkg-config
                        vulkan-headers))
   ;; .ci/deploy-linux.sh hints that wayland needs the qt modules for compatibility
   ;; vulkan-loader needs to be in the common path until guix#71109 `[PATCH] gnu: vulkan-tools: Wrap binaries with LD_LIBRARY_PATH.`
   (propagated-inputs (list qtwayland
                            qtmultimedia-with-plugin-path
                            vulkan-loader)) 
   (synopsis "The world's first free and open-source PlayStation 3 emulator/debugger, written in C++ for Windows, Linux, macOS and FreeBSD.")
   (description synopsis)
   (home-page "rpcs3.net")
   (license license:gpl2)))

;; Notes
;; - In wayland use `QT_QPA_PLATFORM=xcb rpcs3` otherwise `Vulkan API call failed with unrecoverable error: Out of host memory (system RAM) (VK_ERROR_OUT_OF_HOST_MEMORY)`
;;   `qtwayland` package might not belong here. Sort it out another time.
;; - Only works with vulkan on a graphics card, `llvmpipe` doesn't work.
;; - qt.glx: qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 4.3, options QFlags<QSurfaceFormat::FormatOption>(),
;;   depthBufferSize 0, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior
;;   QSurfaceFormat::SingleBuffer, swapInterval 1, colorSpace QColorSpace(), profile  QSurfaceFormat::CoreProfile)
;;   Could not initialize GLX
;;   Issue with OpenGl


